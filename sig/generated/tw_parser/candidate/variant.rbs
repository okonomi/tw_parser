# Generated from lib/tw_parser/candidate/variant.rb with RBS::Inline

module TwParser
  module Candidate
    type variant = ArbitraryVariant | StaticVariant | FunctionalVariant | CompoundVariant

    # Arbitrary variants are variants that take a selector and generate a variant
    # on the fly.
    #
    # E.g.: `[&_p]`
    class ArbitraryVariant < Data
      attr_reader selector(): String

      attr_reader relative(): bool

      def self.new: (String selector, bool relative) -> instance
                  | (selector: String, relative: bool) -> instance

      def self.members: () -> [ :selector, :relative ]

      def members: () -> [ :selector, :relative ]
    end

    # Static variants are variants that don't take any arguments.
    #
    # E.g.: `hover`
    class StaticVariant < Data
      attr_reader root(): String

      def self.new: (String root) -> instance
                  | (root: String) -> instance

      def self.members: () -> [ :root ]

      def members: () -> [ :root ]
    end

    # Functional variants are variants that can take an argument. The argument is
    # either a named variant value or an arbitrary variant value.
    #
    # E.g.:
    #
    # - `aria-disabled`
    # - `aria-[disabled]`
    # - `@container-size`          -> @container, with named value `size`
    # - `@container-[inline-size]` -> @container, with arbitrary variant value `inline-size`
    # - `@container`               -> @container, with no value
    class FunctionalVariant < Data
      attr_reader root(): String

      attr_reader value(): ArbitraryVariantValue | NamedVariantValue | nil

      attr_reader modifier(): ArbitraryModifier | NamedModifier | nil

      def self.new: (String root, ArbitraryVariantValue | NamedVariantValue | nil value, ArbitraryModifier | NamedModifier | nil modifier) -> instance
                  | (root: String, value: ArbitraryVariantValue | NamedVariantValue | nil, modifier: ArbitraryModifier | NamedModifier | nil) -> instance

      def self.members: () -> [ :root, :value, :modifier ]

      def members: () -> [ :root, :value, :modifier ]
    end

    # Compound variants are variants that take another variant as an argument.
    #
    # E.g.:
    #
    # - `has-[&_p]`
    # - `group-*`
    # - `peer-*`
    class CompoundVariant < Data
      attr_reader root(): String

      attr_reader modifier(): ArbitraryModifier | NamedModifier | nil

      attr_reader variant(): variant

      def self.new: (String root, ArbitraryModifier | NamedModifier | nil modifier, variant variant) -> instance
                  | (root: String, modifier: ArbitraryModifier | NamedModifier | nil, variant: variant) -> instance

      def self.members: () -> [ :root, :modifier, :variant ]

      def members: () -> [ :root, :modifier, :variant ]
    end

    class ArbitraryVariantValue < Data
      attr_reader value(): String

      def self.new: (String value) -> instance
                  | (value: String) -> instance

      def self.members: () -> [ :value ]

      def members: () -> [ :value ]
    end

    class NamedVariantValue < Data
      attr_reader value(): String

      def self.new: (String value) -> instance
                  | (value: String) -> instance

      def self.members: () -> [ :value ]

      def members: () -> [ :value ]
    end
  end
end
